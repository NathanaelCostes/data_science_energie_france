frame_data <- conso_sum %>% filter(annee_factor %in% year)
#View(frame_data)
list(
label = as.character(year),
method = "animate",
args = list(list(
"geo.z", frame_data$conso,
"geo.text", frame_data$text,
"geo.locations", frame_data$libelle_region,
"slider.value", i
), list(redraw = TRUE, fromcurrent = FALSE)),
value = i
)
})
)
)
)
# Display the map
map_plot
# Load required libraries
library(plotly)
library(dplyr)
# Read the data
conso <- read.csv("E:/Travail/INFO4/ProjetR/conso_annuelle/conso_annuelle_clean.csv", sep=";")
# Convert the 'annee' column to character format
conso$annee <- as.character(conso$annee)
# Aggregate data
conso_sum <- conso %>%
group_by(libelle_region, annee_factor = factor(annee, levels = unique(sort(annee)))) %>%
summarise(conso = sum(conso),
.groups = 'drop')  # Use 'drop' to return an ungrouped data frame
# Create text column
conso_sum$text <- paste('Region: ', conso_sum$libelle_region, '<br>Year: ', as.character(conso_sum$annee_factor), '<br>Consumption: ', conso_sum$conso, ' MwH')
# Create a choropleth map
map_plot <- plot_geo(
data = conso_sum,
geojson = 'https://raw.githubusercontent.com/gregoiredavid/france-geojson/master/regions-version-simplifiee.geojson',
featureidkey = 'properties.nom',
locations = ~libelle_region,
z = ~conso,
text = ~text,
colors = 'viridis',
colorbar = list(title = "Consommation energie (MwH)")
) %>%
layout(
title = "Consommation d'énergie en France par région par an",
geo = list(
projection = list(type = 'natural earth'),
center = list(lat = 46.6, lon = 2.2),  # Adjust the center coordinates
scope = 'europe',
lataxis_range = c(42, 50),  # Adjust the latitude range
lonaxis_range = c(-4, 8),  # Adjust the longitude range
showframe = FALSE,
coastlinewidth = 0,
showcoastlines = TRUE
),
sliders = list(
list(
active = 0,
xanchor = "left",
yanchor = "top",
currentvalue = list(prefix = "Année : ", visible = TRUE, xanchor = "right"),
steps = lapply(seq_along(unique(conso_sum$annee_factor)), function(i) {
year <- unique(conso_sum$annee_factor)[1]
frame_data <- conso_sum %>% filter(annee_factor %in% year)
#View(frame_data)
list(
label = as.character(year),
method = "animate",
args = list(list(
"geo.z", frame_data$conso,
"geo.text", frame_data$text,
"geo.locations", frame_data$libelle_region,
"slider.value", i
), list(redraw = TRUE, fromcurrent = FALSE)),
value = i
)
})
)
)
)
# Display the map
map_plot
# Load required libraries
library(plotly)
library(dplyr)
# Read the data
conso <- read.csv("E:/Travail/INFO4/ProjetR/conso_annuelle/conso_annuelle_clean.csv", sep=";")
# Convert the 'annee' column to character format
conso$annee <- as.character(conso$annee)
# Aggregate data
conso_sum <- conso %>%
group_by(libelle_region, annee_factor = factor(annee, levels = unique(sort(annee)))) %>%
summarise(conso = sum(conso),
.groups = 'drop')  # Use 'drop' to return an ungrouped data frame
# Create text column
conso_sum$text <- paste('Region: ', conso_sum$libelle_region, '<br>Year: ', as.character(conso_sum$annee_factor), '<br>Consumption: ', conso_sum$conso, ' MwH')
# Create a choropleth map
map_plot <- plot_geo(
data = conso_sum,
geojson = 'https://raw.githubusercontent.com/gregoiredavid/france-geojson/master/regions-version-simplifiee.geojson',
featureidkey = 'properties.nom',
locations = ~libelle_region,
z = ~conso,
text = ~text,
colors = 'viridis',
colorbar = list(title = "Consommation energie (MwH)")
) %>%
layout(
title = "Consommation d'énergie en France par région par an",
geo = list(
projection = list(type = 'natural earth'),
center = list(lat = 46.6, lon = 2.2),  # Adjust the center coordinates
scope = 'europe',
lataxis_range = c(42, 50),  # Adjust the latitude range
lonaxis_range = c(-4, 8),  # Adjust the longitude range
showframe = FALSE,
coastlinewidth = 0,
showcoastlines = TRUE
),
sliders = list(
list(
active = 0,
xanchor = "left",
yanchor = "top",
currentvalue = list(prefix = "Année : ", visible = TRUE, xanchor = "right"),
steps = lapply(seq_along(unique(conso_sum$annee_factor)), function(i) {
year <- unique(conso_sum$annee_factor)[i]
frame_data <- conso_sum %>% filter(annee_factor %in% year)
#View(frame_data)
list(
label = as.character(year),
method = "animate",
args = list(list(
"geo.z", frame_data$conso,
"geo.text", frame_data$text,
"geo.locations", frame_data$libelle_region,
"slider.value", i
), list(redraw = TRUE, fromcurrent = FALSE)),
value = i
)
})
)
)
)
# Display the map
map_plot
runApp('E:/Travail/INFO4/ProjetR/data_science_energie_france/Energie_France')
# Load required libraries
library(plotly)
library(dplyr)
# Read the data
conso <- read.csv("E:/Travail/INFO4/ProjetR/conso_annuelle/conso_annuelle_clean.csv", sep=";")
# Convert the 'annee' column to character format
conso$annee <- as.character(conso$annee)
# Aggregate data
conso_sum <- conso %>%
group_by(libelle_region, annee_factor = factor(annee, levels = unique(sort(annee)))) %>%
summarise(conso = sum(conso),
.groups = 'drop')  # Use 'drop' to return an ungrouped data frame
# Create text column
conso_sum$text <- paste('Region: ', conso_sum$libelle_region, '<br>Year: ', as.character(conso_sum$annee_factor), '<br>Consumption: ', conso_sum$conso, ' MwH')
# Create a choropleth map
map_plot <- plot_geo(
data = conso_sum,
geojson = 'https://raw.githubusercontent.com/gregoiredavid/france-geojson/master/regions-version-simplifiee.geojson',
featureidkey = 'properties.nom',
locations = ~libelle_region,
z = ~conso,
text = ~text,
colors = 'viridis',
colorbar = list(title = "Consommation energie (MwH)")
) %>%
layout(
title = "Consommation d'énergie en France par région par an",
geo = list(
projection = list(type = 'natural earth'),
center = list(lat = 46.6, lon = 2.2),  # Adjust the center coordinates
scope = 'europe',
lataxis_range = c(42, 50),  # Adjust the latitude range
lonaxis_range = c(-4, 8),  # Adjust the longitude range
showframe = FALSE,
coastlinewidth = 0,
showcoastlines = TRUE
),
sliders = list(
list(
active = 0,
xanchor = "left",
yanchor = "top",
currentvalue = list(prefix = "Année : ", visible = TRUE, xanchor = "right"),
steps = lapply(seq_along(unique(conso_sum$annee_factor)), function(i) {
year <- unique(conso_sum$annee_factor)[i]
frame_data <- conso_sum %>% filter(annee_factor %in% year)
#View(frame_data)
list(
label = as.character(year),
method = "animate",
args = list(list(
"geo.z", frame_data$conso,
"geo.text", frame_data$text,
"geo.locations", frame_data$libelle_region,
"slider.value", i
), list(redraw = TRUE, fromcurrent = FALSE)),
value = i
)
})
)
)
)
# Display the map
map_plot
# Load required libraries
library(plotly)
library(dplyr)
# Read the data
conso <- read.csv("E:/Travail/INFO4/ProjetR/conso_annuelle/conso_annuelle_clean.csv", sep=";")
# Convert the 'annee' column to character format
conso$annee <- as.character(conso$annee)
# Aggregate data
conso_sum <- conso %>%
group_by(libelle_region, annee_factor = factor(annee, levels = unique(sort(annee)))) %>%
summarise(conso = sum(conso),
.groups = 'drop')  # Use 'drop' to return an ungrouped data frame
# Create text column
conso_sum$text <- paste('Region: ', conso_sum$libelle_region, '<br>Year: ', as.character(conso_sum$annee_factor), '<br>Consumption: ', conso_sum$conso, ' MwH')
# Create a choropleth map
map_plot <- plot_geo(
data = conso_sum,
geojson = 'https://raw.githubusercontent.com/gregoiredavid/france-geojson/master/regions-version-simplifiee.geojson',
featureidkey = 'properties.nom',
locations = ~libelle_region,
z = ~conso,
text = ~text,
colors = 'viridis',
colorbar = list(title = "Consommation energie (MwH)")
) %>%
layout(
title = "Consommation d'énergie en France par région par an",
geo = list(
projection = list(type = 'natural earth'),
center = list(lat = 46.6, lon = 2.2),  # Adjust the center coordinates
scope = 'europe',
lataxis_range = c(42, 50),  # Adjust the latitude range
lonaxis_range = c(-4, 8),  # Adjust the longitude range
showframe = FALSE,
coastlinewidth = 0
),
sliders = list(
list(
active = 0,
xanchor = "left",
yanchor = "top",
currentvalue = list(prefix = "Année : ", visible = TRUE, xanchor = "right"),
steps = lapply(seq_along(unique(conso_sum$annee_factor)), function(i) {
year <- unique(conso_sum$annee_factor)[i]
frame_data <- conso_sum %>% filter(annee_factor %in% year)
#View(frame_data)
list(
label = as.character(year),
method = "animate",
args = list(list(
"geo.z", frame_data$conso,
"geo.text", frame_data$text,
"geo.locations", frame_data$libelle_region,
"slider.value", i
), list(redraw = TRUE, fromcurrent = FALSE)),
value = i
)
})
)
)
)
# Display the map
map_plot
shiny::runApp('E:/Travail/INFO4/ProjetR/data_science_energie_france/Energie_France')
shiny::runApp('E:/Travail/INFO4/ProjetR/data_science_energie_france/Energie_France')
shiny::runApp('E:/Travail/INFO4/ProjetR/data_science_energie_france/Energie_France')
runApp('E:/Travail/INFO4/ProjetR/data_science_energie_france/Energie_France')
shiny::runApp('E:/Travail/INFO4/ProjetR/data_science_energie_france/Energie_France')
runApp('E:/Travail/INFO4/ProjetR/data_science_energie_france/Energie_France')
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(tidyr)
library(ggplot2)
library(stringi)
# Assuming data is your data frame
data <- read.csv("E:/Travail/INFO4/ProjetR/indisponibilite-moyens-prod-clean.csv", header = TRUE, sep = ";")
# Convert date_de_debut to a date format if it's not already
data$date_de_debut <- as.Date(data$date_de_debut)
# Extract year and month from the date columns
data$month_year <- format(data$date_de_debut, "%b %Y")
# Set the price per MWh
price_per_kWh <- 168.33
# Calculate the total money lost
data$total_diff_power <- data$puissance_maximale_mw - data$puissance_disponible_mw
data_filtered <- data %>%
filter(!is.na(total_diff_power)) %>%
group_by(month_year) %>%
summarise(
total_diff_power = sum(total_diff_power),
total_money_lost = sum(total_diff_power) * price_per_kWh
)
# Normalize the Money Lost values
max_money_lost <- max(data_filtered$total_money_lost)
sf <- max(data_filtered$total_diff_power) / max_money_lost
# Divide the money values by 1000
data_filtered <- data_filtered %>%
mutate(total_money_lost_scaled = total_money_lost / 100)
View(data_filtered)
# Manually specify the order of levels for month_year
custom_order <- c("févr. 2022", "janv. 2023", "févr. 2023",
"mars 2023", "avr. 2023", "mai 2023", "juin 2023", "juil. 2023", "août 2023", "sept. 2023",
"oct. 2023", "nov. 2023", "déc. 2023")
# Transform
DF_long <- data_filtered %>%
pivot_longer(
cols = c(total_diff_power, total_money_lost_scaled),
names_to = "Type",
values_to = "scaled_value"
)
# Convert month_year to a factor with the custom order
DF_long$month_year <- factor(DF_long$month_year, levels = custom_order)
# Plot
ggplot(DF_long, aes(x = month_year, y = scaled_value, fill = Type)) +
geom_col(position = "dodge") +
scale_y_continuous(
name = "Difference prod en Mwh",
labels = scales::comma,
sec.axis = sec_axis(~ . / 100, name = "Manque à gagner en k€", labels = scales::comma)
) +
labs(y = "Difference prod en Mwh") +
labs(x = 'Mois') +
scale_fill_manual(values = c("darkslateblue", "brown1")) +
theme_bw() +
theme(
legend.position = 'top',
plot.title = element_text(color = 'black', face = 'bold', hjust = 0.5),
axis.text = element_text(color = 'black', face = 'bold', size = 8),
axis.title = element_text(color = 'black', face = 'bold'),
legend.text = element_text(color = 'black', face = 'bold'),
legend.title = element_text(color = 'black', face = 'bold'),
axis.text.x = element_text(angle = 45, hjust = 1),  # Rotate x-axis labels
plot.margin = margin(l = 30, r = 30, t = 10, b = 10, unit = "pt")  # Adjust the margins
) +
ggtitle('Manque de production des centrales nucleaires françaises en 2023')
library(ggplot2)
# Assuming data is your data frame
data <- read.csv("E:/Travail/INFO4/ProjetR/disponibilite-du-parc-nucleaire-d-edf-sa-depuis-2002-clean.csv", header = TRUE, sep = ";")
library(dplyr)
library(tidyr)
library(ggplot2)
library(stringi)
# Assuming data is your data frame
data <- read.csv("E:/Travail/INFO4/ProjetR/indisponibilite-moyens-prod-clean.csv", header = TRUE, sep = ";")
# Convert date_de_debut to a date format if it's not already
data$date_de_debut <- as.Date(data$date_de_debut)
# Extract year and month from the date columns
data$month_year <- format(data$date_de_debut, "%b %Y")
# Set the price per MWh
price_per_kWh <- 168.33
# Calculate the total money lost
data$total_diff_power <- data$puissance_maximale_mw - data$puissance_disponible_mw
data_filtered <- data %>%
filter(!is.na(total_diff_power)) %>%
group_by(month_year) %>%
summarise(
total_diff_power = sum(total_diff_power),
total_money_lost = sum(total_diff_power) * price_per_kWh
)
# Normalize the Money Lost values
max_money_lost <- max(data_filtered$total_money_lost)
sf <- max(data_filtered$total_diff_power) / max_money_lost
# Divide the money values by 1000
data_filtered <- data_filtered %>%
mutate(total_money_lost_scaled = total_money_lost / 100)
View(data_filtered)
# Manually specify the order of levels for month_year
custom_order <- c("févr. 2022", "janv. 2023", "févr. 2023",
"mars 2023", "avr. 2023", "mai 2023", "juin 2023", "juil. 2023", "août 2023", "sept. 2023",
"oct. 2023", "nov. 2023", "déc. 2023")
# Transform
DF_long <- data_filtered %>%
pivot_longer(
cols = c(total_diff_power, total_money_lost_scaled),
names_to = "Type",
values_to = "scaled_value"
)
# Convert month_year to a factor with the custom order
DF_long$month_year <- factor(DF_long$month_year, levels = custom_order)
# Plot
ggplot(DF_long, aes(x = month_year, y = scaled_value, fill = Type)) +
geom_col(position = "dodge") +
scale_y_continuous(
name = "Difference prod en Mwh",
labels = scales::comma,
sec.axis = sec_axis(~ . / 100, name = "Manque à gagner en k€", labels = scales::comma)
) +
labs(y = "Difference prod en Mwh") +
labs(x = 'Mois') +
scale_fill_manual(values = c("darkslateblue", "brown1")) +
theme_bw() +
theme(
legend.position = 'top',
plot.title = element_text(color = 'black', face = 'bold', hjust = 0.5),
axis.text = element_text(color = 'black', face = 'bold', size = 8),
axis.title = element_text(color = 'black', face = 'bold'),
legend.text = element_text(color = 'black', face = 'bold'),
legend.title = element_text(color = 'black', face = 'bold'),
axis.text.x = element_text(angle = 45, hjust = 1),  # Rotate x-axis labels
plot.margin = margin(l = 30, r = 30, t = 10, b = 10, unit = "pt")  # Adjust the margins
) +
ggtitle('Manque de production des centrales nucleaires françaises en 2023')
library(dplyr)
library(tidyr)
library(ggplot2)
library(stringi)
# Assuming data is your data frame
data <- read.csv("E:/Travail/INFO4/ProjetR/indisponibilite-moyens-prod-clean.csv", header = TRUE, sep = ";")
# Convert date_de_debut to a date format if it's not already
data$date_de_debut <- as.Date(data$date_de_debut)
# Extract year and month from the date columns
data$month_year <- format(data$date_de_debut, "%b %Y")
# Set the price per MWh
price_per_kWh <- 168.33
# Calculate the total money lost
data$total_diff_power <- data$puissance_maximale_mw - data$puissance_disponible_mw
data_filtered <- data %>%
filter(!is.na(total_diff_power)) %>%
group_by(month_year) %>%
summarise(
total_diff_power = sum(total_diff_power),
total_money_lost = sum(total_diff_power) * price_per_kWh
)
# Normalize the Money Lost values
max_money_lost <- max(data_filtered$total_money_lost)
sf <- max(data_filtered$total_diff_power) / max_money_lost
# Divide the money values by 1000
data_filtered <- data_filtered %>%
mutate(total_money_lost_scaled = total_money_lost / 100)
View(data_filtered)
# Manually specify the order of levels for month_year
custom_order <- c("Feb 2022", "Jan 2023", "Feb 2023",
"Mar 2023", "Apr 2023", "May 2023", "Jun 2023", "Jul 2023", "Aug 2023", "Sep 2023",
"Oct 2023", "Nov 2023", "Dec 2023")
# Transform
DF_long <- data_filtered %>%
pivot_longer(
cols = c(total_diff_power, total_money_lost_scaled),
names_to = "Type",
values_to = "scaled_value"
)
# Convert month_year to a factor with the custom order
DF_long$month_year <- factor(DF_long$month_year, levels = custom_order)
# Plot
ggplot(DF_long, aes(x = month_year, y = scaled_value, fill = Type)) +
geom_col(position = "dodge") +
scale_y_continuous(
name = "Difference prod en Mwh",
labels = scales::comma,
sec.axis = sec_axis(~ . / 100, name = "Manque à gagner en k€", labels = scales::comma)
) +
labs(y = "Difference prod en Mwh") +
labs(x = 'Mois') +
scale_fill_manual(values = c("darkslateblue", "brown1")) +
theme_bw() +
theme(
legend.position = 'top',
plot.title = element_text(color = 'black', face = 'bold', hjust = 0.5),
axis.text = element_text(color = 'black', face = 'bold', size = 8),
axis.title = element_text(color = 'black', face = 'bold'),
legend.text = element_text(color = 'black', face = 'bold'),
legend.title = element_text(color = 'black', face = 'bold'),
axis.text.x = element_text(angle = 45, hjust = 1),  # Rotate x-axis labels
plot.margin = margin(l = 30, r = 30, t = 10, b = 10, unit = "pt")  # Adjust the margins
) +
ggtitle('Manque de production des centrales nucleaires françaises en 2023')
runApp('E:/Travail/INFO4/ProjetR/data_science_energie_france/Energie_France')
runApp('E:/Travail/INFO4/ProjetR/data_science_energie_france/Energie_France')
shiny::runApp('E:/Travail/INFO4/ProjetR/data_science_energie_france/Energie_France')
runApp('E:/Travail/INFO4/ProjetR/data_science_energie_france/Energie_France')
runApp('E:/Travail/INFO4/ProjetR/data_science_energie_france/Energie_France')
runApp('E:/Travail/INFO4/ProjetR/data_science_energie_france/Energie_France')
runApp('E:/Travail/INFO4/ProjetR/data_science_energie_france/Energie_France')
runApp('E:/Travail/INFO4/ProjetR/data_science_energie_france/Energie_France')
runApp('E:/Travail/INFO4/ProjetR/data_science_energie_france/Energie_France')
runApp('E:/Travail/INFO4/ProjetR/data_science_energie_france/Energie_France')
runApp('E:/Travail/INFO4/ProjetR/data_science_energie_france/Energie_France')
runApp('E:/Travail/INFO4/ProjetR/data_science_energie_france/Energie_France')
runApp('E:/Travail/INFO4/ProjetR/data_science_energie_france/Energie_France')
runApp('E:/Travail/INFO4/ProjetR/data_science_energie_france/Energie_France')
runApp('E:/Travail/INFO4/ProjetR/data_science_energie_france/Energie_France')
runApp('E:/Travail/INFO4/ProjetR/data_science_energie_france/Energie_France')
runApp('E:/Travail/INFO4/ProjetR/data_science_energie_france/Energie_France')
runApp('E:/Travail/INFO4/ProjetR/data_science_energie_france/Energie_France')
runApp('E:/Travail/INFO4/ProjetR/data_science_energie_france/Energie_France')
runApp('E:/Travail/INFO4/ProjetR/data_science_energie_france/Energie_France')
runApp('E:/Travail/INFO4/ProjetR/data_science_energie_france/Energie_France')
runApp('E:/Travail/INFO4/ProjetR/data_science_energie_france/Energie_France')
runApp('E:/Travail/INFO4/ProjetR/data_science_energie_france/Energie_France')
runApp('E:/Travail/INFO4/ProjetR/data_science_energie_france/Energie_France')
shiny::runApp('E:/Travail/INFO4/ProjetR/data_science_energie_france/Energie_France')
runApp('E:/Travail/INFO4/ProjetR/data_science_energie_france/Energie_France')
runApp('E:/Travail/INFO4/ProjetR/data_science_energie_france/Energie_France')
runApp('E:/Travail/INFO4/ProjetR/data_science_energie_france/Energie_France')
runApp('E:/Travail/INFO4/ProjetR/data_science_energie_france/Energie_France')
runApp('E:/Travail/INFO4/ProjetR/data_science_energie_france/Energie_France')
runApp('E:/Travail/INFO4/ProjetR/data_science_energie_france/Energie_France')
shiny::runApp('E:/Travail/INFO4/ProjetR/data_science_energie_france/Energie_France')
runApp('E:/Travail/INFO4/ProjetR/data_science_energie_france/Energie_France')
runApp('E:/Travail/INFO4/ProjetR/data_science_energie_france/Energie_France')
runApp('E:/Travail/INFO4/ProjetR/data_science_energie_france/Energie_France')
