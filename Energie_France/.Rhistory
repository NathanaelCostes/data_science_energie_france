summarise(
total_diff_power = sum(total_diff_power),
total_money_lost = sum(total_diff_power) * price_per_kWh
)
# Normalize the Money Lost values
max_money_lost <- max(data_filtered$total_money_lost)
sf <- max(data_filtered$total_diff_power) / max_money_lost
# Divide the money values by 1000
data_filtered <- data_filtered %>%
mutate(total_money_lost_scaled = total_money_lost / 100)
# Transform
DF_long <- data_filtered %>%
pivot_longer(
cols = c(total_diff_power, total_money_lost_scaled),
names_to = "Type",
values_to = "scaled_value"
)
unique(data$month_year)
# Manually specify the order of levels for month_year
custom_order <- c("janv 2022", "févr 2022", "mars 2022", "avr. 2022", "mai 2022", "juin 2022", "juil 2022",
"août 2022", "sept 2022", "oct 2022", "nov 2022", "déc. 2022", "janv 2023", "févr 2023",
"mars 2023", "avr. 2023", "mai 2023", "juin 2023", "juil 2023", "août 2023", "sept 2023",
"oct 2023", "nov 2023", "déc. 2023", "janv 2024", "févr 2024", "mars 2024", "avr. 2024",
"mai 2024", "juin 2024", "juil 2024", "août 2024", "sept 2024", "oct 2024", "nov 2024",
"déc. 2024")
# Convert month_year to a factor with the custom order
DF_long$month_year <- factor(DF_long$month_year, levels = custom_order)
head(data_filtered)
# Plot
ggplot(DF_long, aes(x = month_year, y = scaled_value, fill = Type)) +
geom_col(position = "dodge") +
scale_y_continuous(
name = "Difference prod en Mwh",
labels = scales::comma,
sec.axis = sec_axis(~ . / 100, name = "Manque à gagner en k€", labels = scales::comma)
) +
labs(y = "Difference prod en Mwh") +
scale_fill_manual(values = c("darkslateblue", "brown1")) +
theme_bw() +
theme(
legend.position = 'top',
plot.title = element_text(color = 'black', face = 'bold', hjust = 0.5),
axis.text = element_text(color = 'black', face = 'bold', size = 8),
axis.title = element_text(color = 'black', face = 'bold'),
legend.text = element_text(color = 'black', face = 'bold'),
legend.title = element_text(color = 'black', face = 'bold'),
axis.text.x = element_text(angle = 45, hjust = 1)  # Rotate x-axis labels
) +
ggtitle('Manque de production des centrales nucleaires françaises en 2023')
library(ggplot2)
library(tidyr)
library(dplyr)
# Assuming data is your data frame
data <- read.csv("E:/Travail/INFO4/ProjetR/indisponibilite-moyens-prod-clean.csv", header = TRUE, sep = ";")
# Convert date_de_debut to a date format if it's not already
data$date_de_debut <- as.Date(data$date_de_debut)
# Extract year and month from the date columns
data$month_year <- format(data$date_de_debut, "%b %Y")
# Set the price per MWh
price_per_kWh <- 168.33
# Calculate the total money lost
data$total_diff_power <- data$puissance_maximale_mw - data$puissance_disponible_mw
data_filtered <- data %>%
filter(!is.na(total_diff_power)) %>%
group_by(month_year) %>%
summarise(
total_diff_power = sum(total_diff_power),
total_money_lost = sum(total_diff_power) * price_per_kWh
)
# Normalize the Money Lost values
max_money_lost <- max(data_filtered$total_money_lost)
sf <- max(data_filtered$total_diff_power) / max_money_lost
# Divide the money values by 1000
data_filtered <- data_filtered %>%
mutate(total_money_lost_scaled = total_money_lost / 100)
# Manually specify the order of levels for month_year
custom_order <- c( "févr. 2022", "janv. 2023", "févr. 2023",
"mars 2023", "avr. 2023", "mai 2023", "juin 2023", "juil. 2023", "août 2023", "sept 2023",
"oct. 2023", "nov. 2023", "déc. 2023")
# Transform
DF_long <- data_filtered %>%
pivot_longer(
cols = c(total_diff_power, total_money_lost_scaled),
names_to = "Type",
values_to = "scaled_value"
)
unique(data$month_year)
# Convert month_year to a factor with the custom order
DF_long$month_year <- factor(DF_long$month_year, levels = custom_order)
head(data_filtered)
# Plot
ggplot(DF_long, aes(x = month_year, y = scaled_value, fill = Type)) +
geom_col(position = "dodge") +
scale_y_continuous(
name = "Difference prod en Mwh",
labels = scales::comma,
sec.axis = sec_axis(~ . / 100, name = "Manque à gagner en k€", labels = scales::comma)
) +
labs(y = "Difference prod en Mwh") +
scale_fill_manual(values = c("darkslateblue", "brown1")) +
theme_bw() +
theme(
legend.position = 'top',
plot.title = element_text(color = 'black', face = 'bold', hjust = 0.5),
axis.text = element_text(color = 'black', face = 'bold', size = 8),
axis.title = element_text(color = 'black', face = 'bold'),
legend.text = element_text(color = 'black', face = 'bold'),
legend.title = element_text(color = 'black', face = 'bold'),
axis.text.x = element_text(angle = 45, hjust = 1)  # Rotate x-axis labels
) +
ggtitle('Manque de production des centrales nucleaires françaises en 2023')
library(ggplot2)
library(tidyr)
library(dplyr)
# Assuming data is your data frame
data <- read.csv("E:/Travail/INFO4/ProjetR/indisponibilite-moyens-prod-clean.csv", header = TRUE, sep = ";")
# Convert date_de_debut to a date format if it's not already
data$date_de_debut <- as.Date(data$date_de_debut)
# Extract year and month from the date columns
data$month_year <- format(data$date_de_debut, "%b %Y")
# Set the price per MWh
price_per_kWh <- 168.33
# Calculate the total money lost
data$total_diff_power <- data$puissance_maximale_mw - data$puissance_disponible_mw
data_filtered <- data %>%
filter(!is.na(total_diff_power)) %>%
group_by(month_year) %>%
summarise(
total_diff_power = sum(total_diff_power),
total_money_lost = sum(total_diff_power) * price_per_kWh
)
# Normalize the Money Lost values
max_money_lost <- max(data_filtered$total_money_lost)
sf <- max(data_filtered$total_diff_power) / max_money_lost
# Divide the money values by 1000
data_filtered <- data_filtered %>%
mutate(total_money_lost_scaled = total_money_lost / 100)
# Manually specify the order of levels for month_year
custom_order <- c( "févr. 2022", "janv. 2023", "févr. 2023",
"mars 2023", "avr. 2023", "mai 2023", "juin 2023", "juil. 2023", "août 2023", "sept. 2023",
"oct. 2023", "nov. 2023", "déc. 2023")
# Transform
DF_long <- data_filtered %>%
pivot_longer(
cols = c(total_diff_power, total_money_lost_scaled),
names_to = "Type",
values_to = "scaled_value"
)
unique(data$month_year)
# Convert month_year to a factor with the custom order
DF_long$month_year <- factor(DF_long$month_year, levels = custom_order)
head(data_filtered)
# Plot
ggplot(DF_long, aes(x = month_year, y = scaled_value, fill = Type)) +
geom_col(position = "dodge") +
scale_y_continuous(
name = "Difference prod en Mwh",
labels = scales::comma,
sec.axis = sec_axis(~ . / 100, name = "Manque à gagner en k€", labels = scales::comma)
) +
labs(y = "Difference prod en Mwh") +
scale_fill_manual(values = c("darkslateblue", "brown1")) +
theme_bw() +
theme(
legend.position = 'top',
plot.title = element_text(color = 'black', face = 'bold', hjust = 0.5),
axis.text = element_text(color = 'black', face = 'bold', size = 8),
axis.title = element_text(color = 'black', face = 'bold'),
legend.text = element_text(color = 'black', face = 'bold'),
legend.title = element_text(color = 'black', face = 'bold'),
axis.text.x = element_text(angle = 45, hjust = 1)  # Rotate x-axis labels
) +
ggtitle('Manque de production des centrales nucleaires françaises en 2023')
library(ggplot2)
library(tidyr)
library(dplyr)
# Assuming data is your data frame
data <- read.csv("E:/Travail/INFO4/ProjetR/indisponibilite-moyens-prod-clean.csv", header = TRUE, sep = ";")
# Convert date_de_debut to a date format if it's not already
data$date_de_debut <- as.Date(data$date_de_debut)
# Extract year and month from the date columns
data$month_year <- format(data$date_de_debut, "%b %Y")
# Set the price per MWh
price_per_kWh <- 168.33
# Calculate the total money lost
data$total_diff_power <- data$puissance_maximale_mw - data$puissance_disponible_mw
data_filtered <- data %>%
filter(!is.na(total_diff_power)) %>%
group_by(month_year) %>%
summarise(
total_diff_power = sum(total_diff_power),
total_money_lost = sum(total_diff_power) * price_per_kWh
)
# Normalize the Money Lost values
max_money_lost <- max(data_filtered$total_money_lost)
sf <- max(data_filtered$total_diff_power) / max_money_lost
# Divide the money values by 1000
data_filtered <- data_filtered %>%
mutate(total_money_lost_scaled = total_money_lost / 100)
# Manually specify the order of levels for month_year
custom_order <- c( "févr. 2022", "janv. 2023", "févr. 2023",
"mars 2023", "avr. 2023", "mai 2023", "juin 2023", "juil. 2023", "août 2023", "sept. 2023",
"oct. 2023", "nov. 2023", "déc. 2023")
# Transform
DF_long <- data_filtered %>%
pivot_longer(
cols = c(total_diff_power, total_money_lost_scaled),
names_to = "Type",
values_to = "scaled_value"
)
unique(data$month_year)
# Convert month_year to a factor with the custom order
DF_long$month_year <- factor(DF_long$month_year, levels = custom_order)
head(data_filtered)
# Plot
ggplot(DF_long, aes(x = month_year, y = scaled_value, fill = Type)) +
geom_col(position = "dodge") +
scale_y_continuous(
name = "Difference prod en Mwh",
labels = scales::comma,
sec.axis = sec_axis(~ . / 100, name = "Manque à gagner en k€", labels = scales::comma)
) +
labs(y = "Difference prod en Mwh") +
scale_fill_manual(values = c("darkslateblue", "brown1")) +
theme_bw() +
theme(
legend.position = 'top',
plot.title = element_text(color = 'black', face = 'bold', hjust = 0.5),
axis.text = element_text(color = 'black', face = 'bold', size = 8),
axis.title = element_text(color = 'black', face = 'bold'),
legend.text = element_text(color = 'black', face = 'bold'),
legend.title = element_text(color = 'black', face = 'bold'),
axis.text.x = element_text(angle = 45, hjust = 1),  # Rotate x-axis labels
plot.margin = margin(l = 30, r = 30, t = 10, b = 10, unit = "pt")  # Adjust the margins
) +
ggtitle('Manque de production des centrales nucleaires françaises en 2023')
library(ggplot2)
library(tidyr)
library(dplyr)
# Assuming data is your data frame
data <- read.csv("E:/Travail/INFO4/ProjetR/indisponibilite-moyens-prod-clean.csv", header = TRUE, sep = ";")
# Convert date_de_debut to a date format if it's not already
data$date_de_debut <- as.Date(data$date_de_debut)
# Extract year and month from the date columns
data$month_year <- format(data$date_de_debut, "%b %Y")
# Set the price per MWh
price_per_kWh <- 168.33
# Calculate the total money lost
data$total_diff_power <- data$puissance_maximale_mw - data$puissance_disponible_mw
data_filtered <- data %>%
filter(!is.na(total_diff_power)) %>%
group_by(month_year) %>%
summarise(
total_diff_power = sum(total_diff_power),
total_money_lost = sum(total_diff_power) * price_per_kWh
)
# Normalize the Money Lost values
max_money_lost <- max(data_filtered$total_money_lost)
sf <- max(data_filtered$total_diff_power) / max_money_lost
# Divide the money values by 1000
data_filtered <- data_filtered %>%
mutate(total_money_lost_scaled = total_money_lost / 100)
# Manually specify the order of levels for month_year
custom_order <- c( "févr. 2022", "janv. 2023", "févr. 2023",
"mars 2023", "avr. 2023", "mai 2023", "juin 2023", "juil. 2023", "août 2023", "sept. 2023",
"oct. 2023", "nov. 2023", "déc. 2023")
# Transform
DF_long <- data_filtered %>%
pivot_longer(
cols = c(total_diff_power, total_money_lost_scaled),
names_to = "Type",
values_to = "scaled_value"
)
unique(data$month_year)
# Convert month_year to a factor with the custom order
DF_long$month_year <- factor(DF_long$month_year, levels = custom_order)
head(data_filtered)
# Plot
ggplot(DF_long, aes(x = month_year, y = scaled_value, fill = Type)) +
geom_col(position = "dodge") +
scale_y_continuous(
name = "Difference prod en Mwh",
labels = scales::comma,
sec.axis = sec_axis(~ . / 100, name = "Manque à gagner en k€", labels = scales::comma)
) +
labs(y = "Difference prod en Mwh") +
labs(x = 'Mois') +
scale_fill_manual(values = c("darkslateblue", "brown1")) +
theme_bw() +
theme(
legend.position = 'top',
plot.title = element_text(color = 'black', face = 'bold', hjust = 0.5),
axis.text = element_text(color = 'black', face = 'bold', size = 8),
axis.title = element_text(color = 'black', face = 'bold'),
legend.text = element_text(color = 'black', face = 'bold'),
legend.title = element_text(color = 'black', face = 'bold'),
axis.text.x = element_text(angle = 45, hjust = 1),  # Rotate x-axis labels
plot.margin = margin(l = 30, r = 30, t = 10, b = 10, unit = "pt")  # Adjust the margins
) +
ggtitle('Manque de production des centrales nucleaires françaises en 2023')
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
data <- read.csv("E:/Travail/INFO4/ProjetR/origine_elec/origine_elec_clean.csv", header = TRUE, sep = ";")
head(data)
# Load the ggplot2 library
library(ggplot2)
# Separate datasets for main sources and CO2 emissions
main_sources_data <- data[data$categorie != "Emission de CO2", ]
co2_data <- data[data$categorie == "Emission de CO2", ]
# Plot for main sources
plot_main_sources <- ggplot(main_sources_data, aes(x = annee, y = as.numeric(valeur), fill = sous_categorie)) +
geom_col(position = "stack") +
scale_fill_manual(values = c(
"Charbon" = "#073b4c",
"Fioul" = "#f78c6b",
"Autres Renouvelables" = "#06d6a0",
"Nucléaire" = "#ef476f",
"Hydraulique" = "#118ab2",
"Gaz" = "#ffd166"
)) +
labs(title = "Origine de l'électricité par source d'énergie",
x = "Année",
y = "Pourcentage") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotate x-axis labels for better visibility
# Plot for CO2 emissions with a secondary y-axis
plot_co2 <- ggplot(co2_data, aes(x = annee, y = as.numeric(valeur), fill = sous_categorie)) +
geom_col(position = "stack") +
scale_fill_manual(values = c(
"CO2" = "#999999"
)) +
labs(title = "Émission de CO2 par production d'élécticité",
x = "Année",
y = "g/kWh fourni") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotate x-axis labels
# Show the plots
print(plot_main_sources)
print(plot_co2)
library(ggplot2)
# Assuming data is your data frame
data <- read.csv("E:/Travail/INFO4/ProjetR/disponibilite-du-parc-nucleaire-d-edf-sa-depuis-2002-clean.csv", header = TRUE, sep = ";")
# Create a bar plot
ggplot(data, aes(x = as.factor(annee), y = pourcent)) +
geom_bar(stat = "identity", fill = "skyblue") +
ggtitle("Percentage over the Years") +
xlab("Year") +
ylab("Percentage") +
theme_minimal()
library(ggplot2)
# Assuming data is your data frame
data <- read.csv("E:/Travail/INFO4/ProjetR/disponibilite-du-parc-nucleaire-d-edf-sa-depuis-2002-clean.csv", header = TRUE, sep = ";")
# Create a bar plot
ggplot(data, aes(x = as.factor(annee), y = coefficient_de_disponibilite)) +
geom_bar(stat = "identity", fill = "skyblue") +
ggtitle("Percentage over the Years") +
xlab("Year") +
ylab("Percentage") +
theme_minimal()
library(ggplot2)
# Assuming data is your data frame
data <- read.csv("E:/Travail/INFO4/ProjetR/disponibilite-du-parc-nucleaire-d-edf-sa-depuis-2002-clean.csv", header = TRUE, sep = ";")
# Create a bar plot
ggplot(data, aes(x = as.factor(annee), y = coefficient_de_disponibilite)) +
goem_point(stat = "identity", fill = "skyblue") +
ggtitle("Percentage over the Years") +
xlab("Year") +
ylab("Percentage") +
theme_minimal()
library(ggplot2)
# Assuming data is your data frame
data <- read.csv("E:/Travail/INFO4/ProjetR/disponibilite-du-parc-nucleaire-d-edf-sa-depuis-2002-clean.csv", header = TRUE, sep = ";")
# Create a scatter plot with points
ggplot(data, aes(x = as.factor(annee), y = pourcent)) +
geom_point(color = "blue") +
ggtitle("Percentage over the Years") +
xlab("Year") +
ylab("Percentage") +
theme_minimal()
library(ggplot2)
# Assuming data is your data frame
data <- read.csv("E:/Travail/INFO4/ProjetR/disponibilite-du-parc-nucleaire-d-edf-sa-depuis-2002-clean.csv", header = TRUE, sep = ";")
# Create a scatter plot with points
ggplot(data, aes(x = as.factor(annee), y = coefficient_de_disponibilite)) +
geom_point(color = "blue") +
ggtitle("Percentage over the Years") +
xlab("Year") +
ylab("Percentage") +
theme_minimal()
library(ggplot2)
# Assuming data is your data frame
data <- read.csv("E:/Travail/INFO4/ProjetR/disponibilite-du-parc-nucleaire-d-edf-sa-depuis-2002-clean.csv", header = TRUE, sep = ";")
# Create a plot with lines and colored area underneath
ggplot(data, aes(x = as.factor(annee), y = coefficient_de_disponibilite)) +
geom_line(color = "blue") +
geom_ribbon(aes(ymin = 0, ymax = pourcent), fill = "lightblue", alpha = 0.5) +
ggtitle("Percentage over the Years") +
xlab("Year") +
ylab("Percentage") +
theme_minimal()
library(ggplot2)
# Assuming data is your data frame
data <- read.csv("E:/Travail/INFO4/ProjetR/disponibilite-du-parc-nucleaire-d-edf-sa-depuis-2002-clean.csv", header = TRUE, sep = ";")
# Create a plot with lines and colored area underneath
ggplot(data, aes(x = as.factor(annee), y = coefficient_de_disponibilite)) +
geom_line(color = "blue") +
geom_ribbon(aes(ymin = 0, ymax = coefficient_de_disponibilite), fill = "lightblue", alpha = 0.5) +
ggtitle("Percentage over the Years") +
xlab("Year") +
ylab("Percentage") +
theme_minimal()
library(ggplot2)
# Assuming data is your data frame
data <- read.csv("E:/Travail/INFO4/ProjetR/disponibilite-du-parc-nucleaire-d-edf-sa-depuis-2002-clean.csv", header = TRUE, sep = ";")
# Create a plot with lines and colored area underneath
ggplot(data, aes(x = as.factor(annee), y = coefficient_de_disponibilite)) +
geom_line(color = "blue") +
geom_ribbon(aes(ymin = 0, ymax = coefficient_de_disponibilite), fill = "lightblue", alpha = 0.5) +
ggtitle("Percentage over the Years") +
xlab("Year") +
ylab("Percentage") +
theme_minimal()+
axis.text.x = element_text(angle = 45, hjust = 1),  # Rotate x-axis labels
library(ggplot2)
# Assuming data is your data frame
data <- read.csv("E:/Travail/INFO4/ProjetR/disponibilite-du-parc-nucleaire-d-edf-sa-depuis-2002-clean.csv", header = TRUE, sep = ";")
# Create a plot with lines and colored area underneath
ggplot(data, aes(x = as.factor(annee), y = coefficient_de_disponibilite)) +
geom_line(color = "blue") +
geom_ribbon(aes(ymin = 0, ymax = coefficient_de_disponibilite), fill = "lightblue", alpha = 0.5) +
ggtitle("Percentage over the Years") +
xlab("Year") +
ylab("Percentage") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
library(ggplot2)
# Assuming data is your data frame
data <- read.csv("E:/Travail/INFO4/ProjetR/disponibilite-du-parc-nucleaire-d-edf-sa-depuis-2002-clean.csv", header = TRUE, sep = ";")
# Create a plot with lines and colored area underneath
ggplot(data, aes(x = as.factor(annee), y = coefficient_de_disponibilite)) +
geom_line(color = "blue") +
ggtitle("Percentage over the Years") +
xlab("Year") +
ylab("Percentage") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
library(ggplot2)
# Assuming data is your data frame
data <- read.csv("E:/Travail/INFO4/ProjetR/disponibilite-du-parc-nucleaire-d-edf-sa-depuis-2002-clean.csv", header = TRUE, sep = ";")
# Create a plot with lines and colored area underneath
ggplot(data, aes(x = annee, y = coefficient_de_disponibilite)) +
geom_line(color = "blue") +
ggtitle("Percentage over the Years") +
xlab("Year") +
ylab("Percentage") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
library(ggplot2)
# Assuming data is your data frame
data <- read.csv("E:/Travail/INFO4/ProjetR/disponibilite-du-parc-nucleaire-d-edf-sa-depuis-2002-clean.csv", header = TRUE, sep = ";")
# Create a plot with lines and colored area underneath
ggplot(data, aes(x = annee, y = coefficient_de_disponibilite)) +
geom_line(color = "blue") +
geom_ribbon(aes(ymin = 0, ymax = coefficient_de_disponibilite), fill = "lightblue", alpha = 0.5) +
ggtitle("Percentage over the Years") +
xlab("Year") +
ylab("Percentage") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
library(ggplot2)
# Assuming data is your data frame
data <- read.csv("E:/Travail/INFO4/ProjetR/disponibilite-du-parc-nucleaire-d-edf-sa-depuis-2002-clean.csv", header = TRUE, sep = ";")
# Create a plot with lines and colored area underneath
ggplot(data, aes(x = annee, y = coefficient_de_disponibilite)) +
geom_line(color = "darkslateblue") +
geom_ribbon(aes(ymin = 0, ymax = coefficient_de_disponibilite), fill = "lightblue", alpha = 0.5) +
ggtitle("Percentage over the Years") +
xlab("Year") +
ylab("Percentage") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
library(ggplot2)
# Assuming data is your data frame
data <- read.csv("E:/Travail/INFO4/ProjetR/disponibilite-du-parc-nucleaire-d-edf-sa-depuis-2002-clean.csv", header = TRUE, sep = ";")
# Create a plot with lines and colored area underneath
ggplot(data, aes(x = annee, y = coefficient_de_disponibilite)) +
geom_line(color = "darkslateblue", size = 1.5) +
geom_ribbon(aes(ymin = 0, ymax = coefficient_de_disponibilite), fill = "lightblue", alpha = 0.5) +
ggtitle("Nuclear Plant Availability Over the Years") +
xlab("Year") +
ylab("Availability Percentage") +
theme_minimal() +
theme(
axis.text.x = element_text(angle = 45, hjust = 1),
plot.title = element_text(color = 'darkslateblue', face = 'bold', hjust = 0.5),
axis.text = element_text(color = 'black', face = 'bold'),
axis.title = element_text(color = 'black', face = 'bold')
)
library(ggplot2)
# Assuming data is your data frame
data <- read.csv("E:/Travail/INFO4/ProjetR/disponibilite-du-parc-nucleaire-d-edf-sa-depuis-2002-clean.csv", header = TRUE, sep = ";")
# Create a plot with lines and colored area underneath
ggplot(data, aes(x = annee, y = coefficient_de_disponibilite)) +
geom_line(color = "darkslateblue", size = 1.5) +
geom_ribbon(aes(ymin = 0, ymax = coefficient_de_disponibilite), fill = "lightblue", alpha = 0.5) +
ggtitle("Disponnibilité des centrales nucleaires depuis 2002") +
xlab("Annee") +
ylab("Pourcentage de disponnibilité") +
theme_minimal() +
theme(
axis.text.x = element_text(angle = 45, hjust = 1),
plot.title = element_text(color = 'darkslateblue', face = 'bold', hjust = 0.5),
axis.text = element_text(color = 'black', face = 'bold'),
axis.title = element_text(color = 'black', face = 'bold')
)
shiny::runApp('E:/Travail/INFO4/ProjetR/data_science_energie_france/Energie_France')
runApp('E:/Travail/INFO4/ProjetR/data_science_energie_france/Energie_France')
